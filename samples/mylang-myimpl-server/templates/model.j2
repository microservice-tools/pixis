from __future__ import absolute_import
from datetime import date, datetime
from typing import List, Dict

{# dependencies #}
{% for file_name in schemas[_current_schema].dependencies %}
from {{cfg.FLASK_SERVER_NAME}}.models.{{file_name}} import {{file_name | capitalize}}
{% endfor %}
from {{cfg.FLASK_SERVER_NAME}}.models.base_model import Model
from {{cfg.FLASK_SERVER_NAME}} import util


{# classes template #}
class {{_current_schema}}(Model):
    def __init__(self,{% for property in schemas[_current_schema].properties %} {{property.name}}: {{property.type}}=None{%if not loop.last %},{% endif %}{% endfor %}):
        self.swagger_types = {
        {% for property in schemas[_current_schema].properties %}
            '{{property.name}}': {{property.type}}{%if not loop.last %},{% endif %}

        {% endfor %}
        }

        self.attribute_map = {
        {% for property in schemas[_current_schema].properties %}
            '{{property.name}}': {{property.name}}{%if not loop.last %},{% endif %}

        {% endfor %}
        }

        {% for property in schemas[_current_schema].properties %}
        self._{{property.name}} = {{property.name}}
        {% endfor %}

    @classmethod
    def from_dict(cls, dikt) -> '{{_current_schema}}':
        return util.deserialize_model(dikt, cls)

    {% for property in schemas[_current_schema].properties %}
    @property
    def {{property.name}}(self) -> '{{property.type}}':
        return self._{{property.name}}

    @{{property.name}}.setter
    def {{property.name}}(self, {{property.name}}: {{property.type}}):
        {% if property.enums %}
        allowed_values = [{% for enum in property.enums %}"{{enum}}"{% if not loop.last %}, {% endif %}{% endfor %}]
        if {{property.name}} not in allowed_values:
            raise ValueError(
                "Invalid value for `{{property.name}}` ({0}), must be one of {1}"
                .format({{property.name}}, allowed_values)
            )
        {% endif %}
        self._{{property.name}} = {{property.name}}
    {% if not loop.last %}

    {% endif %}
    {% endfor %}